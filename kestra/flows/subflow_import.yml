id: subflow_import
namespace: prep

inputs:
  - id: month
    type: STRING
    defaults: "2019-Nov"

variables:
  filegz: "{{inputs.month}}.csv.gz"
  file: "{{inputs.month}}.csv"
  gcs_dataset: "{{kv('GCP_DATASET')}}"
  gcs_raw_url: "gs://{{kv('GCP_BUCKET_URL')}}/{{vars.gcs_dataset}}/raw/{{vars.file}}"
  url_base: "https://data.rees46.com/datasets/marketplace"
  data: "{{outputs.extract.outputFiles[render(vars.file)]}}"
  table: "e-commerce-data"
tasks:

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
       - wget -qO- {{vars.url_base}}/{{render(vars.filegz)}} | gunzip > {{render(vars.file)}}
      
  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_raw_url)}}"

  - id: bq_main_table_create
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS`{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{vars.table}}`
      (
        unique_row_id BYTES OPTIONS (description = 'A unique identifier for the record, generated by hashing key event attributes.'),
        filename STRING OPTIONS (description = 'The source filename from which the record data was loaded'),
        event_time TIMESTAMP OPTIONS (description = 'Time when event happened at (in UTC).'),
        event_type STRING	OPTIONS (description = 'One of [view, cart, remove_from_cart, purchase]'),
        product_id INTEGER OPTIONS (description = 'ID of a product.'),
        category_id INTEGER OPTIONS (description = 'Products category ID'),
        category_code STRING OPTIONS (description = 'Products category taxonomy (code name) if it was possible to make it. Usually present for meaningful categories and skipped for different kinds of accessories.'),
        brand STRING	OPTIONS (description = 'Downcased string of brand name. Can be missed.'),
        price FLOAT64	OPTIONS (description = 'Float price of a product. Present.'),
        user_id INTEGER	OPTIONS (description = 'Permanent user ID.'),
        user_session STRING	OPTIONS (description = 'Temporary users session ID. Same for each users session. Is changed every time user come back to online store from a long pause.')
      )
      PARTITION BY DATE(event_time);

  - id: bq_external_table_create
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{vars.table}}_{{inputs.month}}_ext`
      (
        event_time TIMESTAMP OPTIONS (description = 'Time when event happened at (in UTC).'),
        event_type STRING	OPTIONS (description = 'One of [view, cart, remove_from_cart, purchase]'),
        product_id INTEGER OPTIONS (description = 'ID of a product.'),
        category_id INTEGER OPTIONS (description = 'Products category ID'),
        category_code STRING OPTIONS (description = 'Products category taxonomy (code name) if it was possible to make it. Usually present for meaningful categories and skipped for different kinds of accessories.'),
        brand STRING	OPTIONS (description = 'Downcased string of brand name. Can be missed.'),
        price FLOAT64	OPTIONS (description = 'Float price of a product. Present.'),
        user_id INTEGER	OPTIONS (description = 'Permanent user ID.'),
        user_session STRING	OPTIONS (description = 'Temporary users session ID. Same for each users session. Is changed every time user come back to online store from a long pause.')
      )
      OPTIONS 
      (
      format = 'CSV',
      -- uris = ['gs://fleet-aleph-447822-a2-e_commerce_storage-1/e_commerce_dataset/raw/2019-Oct.csv']
      uris = ['{{render(vars.gcs_raw_url)}}'],
      skip_leading_rows = 1
      );

  - id: bq_staging_table_ingest
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |      
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.stg_{{render(vars.table)}}_{{inputs.month}}` 
      AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(event_time AS STRING), ""),
              COALESCE(CAST(user_session AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.file)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{vars.table}}_{{inputs.month}}_ext`


  - id: bq_main_table_merge
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{vars.table}}` T
      USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.stg_{{render(vars.table)}}_{{inputs.month}}` S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (unique_row_id, filename, event_time, event_type, product_id, category_id, category_code, brand, price, user_id, user_session)
        VALUES (S.unique_row_id, S.filename, S.event_time, S.event_type, S.product_id, S.category_id, S.category_code, S.brand, S.price, S.user_id, S.user_session);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDENTIALS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_URL')}}"